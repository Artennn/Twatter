// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id           String      @id @default(cuid())
  content      String
  likes        Int         @default(0)
  retweets     Int         @default(0)
  createdAt    DateTime    @default(now())
  ownerID      Int
  owner        Profile     @relation(fields: [ownerID], references: [id])
  parentPostID String?
  parent       Post?       @relation("comments", fields: [parentPostID], references: [id], onDelete: Cascade)
  comments     Post[]      @relation("comments")
  savedBy      SavedPost[]
  mentios      Mention[]
}

model SavedPost {
  profileID Int
  profile   Profile       @relation(fields: [profileID], references: [id], onDelete: Cascade)
  postID    String
  post      Post          @relation(fields: [postID], references: [id], onDelete: Cascade)
  like      Boolean?
  retweet   Boolean?

  @@id([profileID, postID])
}

model Mention {
  postID    String
  post      Post    @relation(fields: [postID], references: [id])
  profileID Int
  profile   Profile @relation(fields: [profileID], references: [id])

  @@id([postID, profileID])
}

model Follows {
  followerID  Int
  follower    Profile @relation("follower", fields: [followerID], references: [id])
  followingID Int
  following   Profile @relation("following", fields: [followingID], references: [id])

  @@id([followerID, followingID])
}

model Profile {
  id          Int         @id @default(autoincrement())
  username    String      @unique
  displayName String
  image       String
  background  String?
  verified    Boolean?
  user        User[]
  posts       Post[]
  savedPosts  SavedPost[]
  mentions    Mention[]
  followers   Follows[]   @relation("following")
  following   Follows[]   @relation("follower")
}

//Necessary for Next auth
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  password      String?
  isBlocked     Boolean?
  isAdmin       Boolean?
  profileID     Int?
  profile       Profile?  @relation(fields: [profileID], references: [id])
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
